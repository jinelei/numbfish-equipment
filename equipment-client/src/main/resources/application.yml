server:
  port: ${SERVER_PORT:9999}
  servlet:
    context-path: ${SERVER_CONTEXT:/equipment}
  compression:
    enabled: true
    min-response-size: 1KB
springdoc:
  swagger-ui:
    path: /swagger-ui.html
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: '设备服务'
      paths-to-match: '/**'
      packages-to-scan: com.jinelei.numbfish.equipment.controller

# knife4j的增强配置，不需要增强可以不配
knife4j:
  enable: ${KNIFE4J_ENABLED:true}
  setting:
    language: zh_cn
  # 开启Swagger的Basic认证功能,默认是false
  basic:
    enable: ${KNIFE4J_BASIC_ENABLED:true}
    # Basic认证用户名
    username: ${KNIFE4J_USERNAME:numbfish}
    # Basic认证密码
    password: ${KNIFE4J_PASSWORD:numbfish}

# Logger Config
logging:
  level:
    root: warn
    org.springframework.boot.web.embedded.tomcat: info
    com.jinelei: debug

spring:
  application:
    name: numbfish-equipment-service
  banner:
    location: banner.txt
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:127.0.0.1}:${MYSQL_PORT:3306}/${MYSQL_SCHEMA:iotgenius}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${MYSQL_USERNAME:root}
    password: ${MYSQL_USERNAME:iotG@2025}
    driver-class-name: com.mysql.cj.jdbc.Driver
  data:
    redis:
      host: ${REDIS_HOST:127.0.0.1}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:iotG@2025}
      database: ${REDIS_DATABASE:0}
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0

mybatis:
  mapper-locations: classpath*:mapper/*/*Mapper.xml,classpath*:mapper/*Mapper.xml
  type-handlers-package: com.jinelei.numbfish.equipment.client.configuration.handler.type
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
numbfish:
  authorization:
    admin:
      username: admin
    login:
      url: /user/login
    ignore:
      urls:
        - /webjars
        - /doc.html
        - /user/login
        - /v3/api-docs/**
        - /**
  equipment:
    mqtt:
      enabled: false
      qos: 1
      alias:
        deviceCode: 'deviceCode'
        deviceState: 'state'
        timestamp: 'timestamp'
      topics:
        mixin:
          enabled: false
          name: /dev/mixin
          qos: 1
        state:
          enabled: false
          name: /dev/state
          qos: 1
        parameter:
          enabled: false
          name: /dev/msg
          qos: 1
        connect:
          enabled: false
          name: /dev/conn
          qos: 1
    influx2:
      enabled: true
      url: ${INFLUX_HOST:http://127.0.0.1}:${INFLUX_PORT:8086}
      org: ${INFLUX_ORG:iotgenius}
      token: ${INFLUX_TOKEN:1cTYtXvHh60yBnvut3yJDaaGg4q9GXWBeC8HzSAtrNXl_KR1uKcbzNC4TCkV0QW1i_abASrZpsMASjv31oZoig==}
      bucket: ${INFLUX_BUCKET:iotgenius}
      measurements:
        device-parameter: DeviceParameter
        device-connect: DeviceConnect
        device-state: DeviceState
        device-produce: DeviceProduce
    alias:
      device-code: deviceCode
      timestamp: timestamp
      state: Status
      produce: produce
      event: event